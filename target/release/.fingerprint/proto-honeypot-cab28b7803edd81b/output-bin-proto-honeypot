{"$message_type":"diagnostic","message":"unresolved import `libc`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":3691,"byte_end":3695,"line_start":93,"line_end":93,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"        use libc;","highlight_start":13,"highlight_end":17}],"label":"no external crate `libc`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `libc`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:93:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        use libc;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno external crate `libc`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":477,"byte_end":4157,"line_start":15,"line_end":104,"column_start":31,"column_end":2,"is_primary":true,"text":[{"text":"async fn main() -> Result<()> {","highlight_start":31,"highlight_end":32},{"text":"    // Parse CLI and config","highlight_start":1,"highlight_end":28},{"text":"    let cli = Cli::parse();","highlight_start":1,"highlight_end":28},{"text":"    // Prompt for pairing code interactively","highlight_start":1,"highlight_end":45},{"text":"    use std::io::{self, Write};","highlight_start":1,"highlight_end":32},{"text":"    print!(\"Enter pairing code from dashboard: \");","highlight_start":1,"highlight_end":51},{"text":"    io::stdout().flush()?;","highlight_start":1,"highlight_end":27},{"text":"    let mut pairing_code = String::new();","highlight_start":1,"highlight_end":42},{"text":"    io::stdin().read_line(&mut pairing_code)?;","highlight_start":1,"highlight_end":47},{"text":"    let pairing_code = pairing_code.trim().to_string();","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Load config and inject pairing code","highlight_start":1,"highlight_end":43},{"text":"    let mut cfg = Config::from_cli(&cli).await?;","highlight_start":1,"highlight_end":49},{"text":"    cfg.pairing_code = pairing_code;","highlight_start":1,"highlight_end":37},{"text":"    if cli.list_ports {","highlight_start":1,"highlight_end":24},{"text":"        println!(\"TCP ports: {}\", cfg.ports.iter().map(|p| p.to_string()).collect::<Vec<_>>().join(\", \"));","highlight_start":1,"highlight_end":107},{"text":"        println!(\"UDP ports: {}\", cfg.udp_ports.iter().map(|p| p.to_string()).collect::<Vec<_>>().join(\", \"));","highlight_start":1,"highlight_end":111},{"text":"        return Ok(());","highlight_start":1,"highlight_end":23},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    // Initialize logging / tracing: suppress all local output after startup","highlight_start":1,"highlight_end":77},{"text":"    // Only show errors if backend reporting fails","highlight_start":1,"highlight_end":51},{"text":"    let filter = EnvFilter::new(\"off\");","highlight_start":1,"highlight_end":40},{"text":"    fmt().with_env_filter(filter).init();","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Print startup summary and pairing code (already done below)","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ...no shared_logs needed in convert-and-exit mode...","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Generate fake filesystem","highlight_start":1,"highlight_end":32},{"text":"    fsgen::create_and_populate(&cfg).await?;","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Only print iptables suggestions if explicitly requested","highlight_start":1,"highlight_end":63},{"text":"    if cfg.apply_iptables {","highlight_start":1,"highlight_end":28},{"text":"        util::apply_iptables_rules(&cfg)?;","highlight_start":1,"highlight_end":43},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Print startup summary and pairing code","highlight_start":1,"highlight_end":46},{"text":"    let yellow = \"\\x1b[33m\";","highlight_start":1,"highlight_end":29},{"text":"    let green = \"\\x1b[32m\";","highlight_start":1,"highlight_end":28},{"text":"    let reset = \"\\x1b[0m\";","highlight_start":1,"highlight_end":27},{"text":"    let bold = \"\\x1b[1m\";","highlight_start":1,"highlight_end":26},{"text":"    println!(\"\\n{bold}{green}Honeypot active!{reset}\", bold=bold, green=green, reset=reset);","highlight_start":1,"highlight_end":93},{"text":"    println!(\"  {yellow}Pairing code:{reset}  {code}\", yellow=yellow, reset=reset, code=cfg.pairing_code);","highlight_start":1,"highlight_end":107},{"text":"    println!(\"\\n{green}Registering with dashboard...{reset}\", green=green, reset=reset);","highlight_start":1,"highlight_end":89},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Register honeypot with dashboard","highlight_start":1,"highlight_end":40},{"text":"    let supabase_url = \"https://esueidjcntwsjlevkrrf.supabase.co/rest/v1/honeypots\";","highlight_start":1,"highlight_end":85},{"text":"    let supabase_key = \"sb_secret_j9cv0wIi5mJI1PdYwxPnrA_o4BMas5u\";","highlight_start":1,"highlight_end":68},{"text":"    let client = reqwest::Client::new();","highlight_start":1,"highlight_end":41},{"text":"    let system_name = whoami::fallible::hostname().unwrap_or_else(|_| \"unknown\".to_string());","highlight_start":1,"highlight_end":94},{"text":"    let body = serde_json::json!({","highlight_start":1,"highlight_end":35},{"text":"        \"pairing_code\": cfg.pairing_code,","highlight_start":1,"highlight_end":42},{"text":"        \"system\": system_name,","highlight_start":1,"highlight_end":31},{"text":"        \"status\": \"active\",","highlight_start":1,"highlight_end":28},{"text":"        \"last_seen\": chrono::Utc::now().to_rfc3339()","highlight_start":1,"highlight_end":53},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    let res = client.post(supabase_url)","highlight_start":1,"highlight_end":40},{"text":"        .header(\"Authorization\", format!(\"Bearer {}\", supabase_key))","highlight_start":1,"highlight_end":69},{"text":"        .header(\"apikey\", supabase_key)","highlight_start":1,"highlight_end":40},{"text":"        .header(\"Content-Type\", \"application/json\")","highlight_start":1,"highlight_end":52},{"text":"        .json(&body)","highlight_start":1,"highlight_end":21},{"text":"        .send()","highlight_start":1,"highlight_end":16},{"text":"        .await;","highlight_start":1,"highlight_end":16},{"text":"    match res {","highlight_start":1,"highlight_end":16},{"text":"        Ok(resp) if resp.status().is_success() => {","highlight_start":1,"highlight_end":52},{"text":"            println!(\"{green}Pairing registered with dashboard!{reset}\", green=green, reset=reset);","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        Ok(resp) => {","highlight_start":1,"highlight_end":22},{"text":"            println!(\"{yellow}Warning: Dashboard registration failed: HTTP {}{reset}\", resp.status(), yellow=yellow, reset=reset);","highlight_start":1,"highlight_end":131},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        Err(e) => {","highlight_start":1,"highlight_end":20},{"text":"            println!(\"{yellow}Warning: Dashboard registration error: {e}{reset}\", yellow=yellow, reset=reset, e=e);","highlight_start":1,"highlight_end":116},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Always set stealthy process name on Linux","highlight_start":1,"highlight_end":49},{"text":"    #[cfg(target_os = \"linux\")]","highlight_start":1,"highlight_end":32},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use libc;","highlight_start":1,"highlight_end":18},{"text":"        let stealth_name = b\"systemd-journal\\0\";","highlight_start":1,"highlight_end":49},{"text":"        unsafe {","highlight_start":1,"highlight_end":17},{"text":"            libc::prctl(libc::PR_SET_NAME, stealth_name.as_ptr() as usize, 0, 0, 0);","highlight_start":1,"highlight_end":85},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Start listeners, logging, and reporting (restore previous active mode)","highlight_start":1,"highlight_end":78},{"text":"    // ...existing code for listeners, metrics, reporter...","highlight_start":1,"highlight_end":60},{"text":"    // Wait for Ctrl+C to exit","highlight_start":1,"highlight_end":31},{"text":"    println!(\"{green}Honeypot running in background. Press Ctrl+C to stop.{reset}\", green=green, reset=reset);","highlight_start":1,"highlight_end":111},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"expected `Result<(), _>`, found `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"  expected enum `Result<(), _>`\nfound unit type `()`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:15:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0masync fn main() -> Result<()> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m _______________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // Parse CLI and config\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let cli = Cli::parse();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    println!(\"{green}Honeypot running in background. Press Ctrl+C to stop.{r\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Result<(), _>`, found `()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m:   expected enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<(), _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m            found unit type `\u001b[0m\u001b[0m\u001b[1m\u001b[35m()\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0308, E0432.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0308, E0432.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0308`.\u001b[0m\n"}
