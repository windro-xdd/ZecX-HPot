//! Fake filesystem generator. Creates directories and files under the honeypot root
//! with randomized names and plausible content to attract attackers.

use crate::config::Config;
use anyhow::Result;
use lipsum::lipsum_words;
use rand::Rng;
use std::fs;
use std::path::Path;
use filetime::{FileTime, set_file_times};

pub async fn create_and_populate(cfg: &Config) -> Result<()> {
    let root = &cfg.honeypot_root;
    if !root.exists() {
        fs::create_dir_all(root)?;
    }

    // Common linux dirs
    let dirs = vec!["home", "var/log", "etc", "tmp"];
    for d in dirs.iter() {
        let p = root.join(d);
        if !p.exists() {
            fs::create_dir_all(&p)?;
        }
        // Populate each directory
        populate_dir(&p, 50)?; // 50 files/dirs per area approx
    }

    // Add specific realistic files
    create_etc_files(root)?;
    create_var_log_files(root)?;
    create_home_user(root)?;

    Ok(())
}

fn populate_dir(base: &Path, count: usize) -> Result<()> {
    let mut rng = rand::thread_rng();
    for i in 0..count {
        if rng.gen_bool(0.2) {
            // create a subdir
            let name = format!("{}-dir-{}", random_word(), i);
            let p = base.join(name);
            let _ = fs::create_dir_all(&p);
            // create a few files inside
            for j in 0..rng.gen_range(1..5) {
                let fname = format!("{}-{}.log", random_word(), j);
                let fpath = p.join(fname);
                let content = generate_file_content(base);
                let _ = fs::write(fpath, content);
            }
        } else {
            // create a file
            let fname = if rng.gen_bool(0.3) {
                format!("{}.conf", random_word())
            } else if rng.gen_bool(0.2) {
                format!("{}.log", random_word())
            } else {
                format!("{}-{}.txt", random_word(), i)
            };
            let fpath = base.join(fname);
            let content = generate_file_content(base);
            let _ = fs::write(&fpath, content);
            // randomize timestamps
            let _ = randomize_mtime(&fpath);
        }
    }
    Ok(())
}

fn generate_file_content(_base: &Path) -> String {
    // Mix system-like noise with lorem ipsum and random tokens
    let mut rng = rand::thread_rng();
    let mut s = String::new();
    // Add a pseudo log header
    s.push_str(&format!("# Generated by proto-honeypot\n"));
    s.push_str(&format!("timestamp: {}\n", chrono::Utc::now().to_rfc3339()));
    // random number of paragraphs
    let paras = rng.gen_range(1..4);
    for _ in 0..paras {
        s.push_str(&lipsum_words(rng.gen_range(20..80)));
        s.push_str("\n\n");
    }
    // Add a fake credential or config snippet sometimes
    if rng.gen_bool(0.15) {
        s.push_str("[database]\nuser = 'admin'\npassword = 'password123'\n");
    }
    s
}

fn random_word() -> String {
    let words = vec!["ssh", "auth", "system", "backup", "config", "log", "data", "cache", "user", "session"];
    let mut rng = rand::thread_rng();
    let i = rng.gen_range(0..words.len());
    format!("{}{}", words[i], rng.gen_range(100..999))
}

fn randomize_mtime(path: &Path) -> Result<()> {
    let mut rng = rand::thread_rng();
    let secs = rng.gen_range(1..=(60 * 60 * 24 * 365)); // up to a year old
    let mtime = FileTime::from_unix_time(chrono::Utc::now().timestamp() - secs, 0);
    set_file_times(path, mtime, mtime)?;
    Ok(())
}

fn create_etc_files(root: &Path) -> Result<()> {
    let etc = root.join("etc");
    fs::create_dir_all(&etc)?;
    let passwd = etc.join("passwd");
    let shadow = etc.join("shadow");
    fs::write(&passwd, "root:x:0:0:root:/root:/bin/bash\nuser:x:1000:1000:User:/home/user:/bin/bash\n")?;
    fs::write(&shadow, "root:*:18400:0:99999:7:::\nuser:*:18400:0:99999:7:::\n")?;
    let sshd = etc.join("ssh");
    fs::create_dir_all(&sshd)?;
    fs::write(&sshd.join("sshd_config"), "Port 22\nPermitRootLogin yes\n")?;
    Ok(())
}

fn create_var_log_files(root: &Path) -> Result<()> {
    let varlog = root.join("var/log");
    fs::create_dir_all(&varlog)?;
    fs::write(&varlog.join("auth.log"), "Aug 28 12:00:00 server sshd[1234]: Accepted password for user from 1.2.3.4 port 22\n")?;
    fs::write(&varlog.join("syslog"), "Aug 28 12:01:00 server systemd[1]: Started Session 1 of user user.\n")?;
    Ok(())
}

fn create_home_user(root: &Path) -> Result<()> {
    let home = root.join("home/user");
    fs::create_dir_all(&home)?;
    fs::write(&home.join("README.txt"), "This is a user home directory\n")?;
    // ssh files
    let ssh = home.join(".ssh");
    fs::create_dir_all(&ssh)?;
    fs::write(&ssh.join("authorized_keys"), "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC... user@example\n")?;
    Ok(())
}
